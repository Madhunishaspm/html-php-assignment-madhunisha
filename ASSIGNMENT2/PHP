31. Remove the first element from an array in PHP using array functions.
ANSWER: In PHP, we can remove the first element of an array using the array_shift() function.
<?php
$animals = array("Dog", "Cat", "Elephant", "Tiger");
$removed = array_shift($animals);
echo "Removed: " . $removed . "\n";
echo "Updated Array Elements: ";
foreach ($animals as $animal) {
    echo $animal . " ";
}
?>
OUTPUT
Removed: Dog
Updated Array Elements: Cat Elephant Tiger 
32. Infer the result of the following PHP code?
a.<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>
OUTPUT:  .Contact me at @dmin@ex@mple.com.
b. Determine the result of the following PHP code?
<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>
OUTPUT: Array
(
    [2] => emily
 )
33. Construct a PHP code to create a multidimensional array representing a matrix and display the value in the second row and third column.
<!DOCTYPE html>
<html>
<head>
<title>Matrix Display in PHP</title>
</head>
<body>
<h2>Matrix Example</h2>
<?php
$matrix = [
    [10, 20, 30],
    [40, 50, 60],
    [70, 80, 90]
];
echo "<table border='1' cellpadding='10'>";
for ($i = 0; $i < count($matrix); $i++) {
    echo "<tr>";
    for ($j = 0; $j < count($matrix[$i]); $j++) {
        echo "<td>" . $matrix[$i][$j] . "</td>";
    }
    echo "</tr>";
}
echo "</table>";
$value = $matrix[1][2];
echo "<p><strong>Value in 2nd Row, 3rd Column: </strong>" . $value . "</p>";
?>
</body>
</html>
Output:
+----+----+----+
| 10 | 20 | 30 |
| 40 | 50 | 60 |
| 70 | 80 | 90 |
+----+----+----+
Value in 2nd Row, 3rd Column: 60
34. Replace all occurrences of a specific word with another word in a string using regular expressions in PHP.
ANSWER: <?php
echo "Q34: Replace Word using Regular Expression\n";
// Original string
$text = "PHP is very powerful. Learning PHP is fun. PHP developers are in demand.";
// Word to replace
$searchWord = "/PHP/i";   // 'i' flag means case-insensitive
$replaceWord = "Python";
// Perform replacement
$updatedText = preg_replace($searchWord, $replaceWord, $text);
// Display results
echo "Original Text:\n" . $text . "\n\n";
echo "After Replacement:\n" . $updatedText . "\n";
?>
OUTPUT:
Q34: Replace Word using Regular Expression
Original Text:
PHP is very powerful. Learning PHP is fun. PHP developers are in demand.
After Replacement:
Python is very powerful. Learning Python is fun. Python developers are in demand.
35. Write a PHP script using an array that checks if a string contains another string and displays the result.
ANSWER :<?php
echo "Q35: String Contains Another String\n\n";
$sentences = array(
    "The sky is blue",
    "PHP is a scripting language",
    "I love programming",
    "Array functions are useful"
);
$search = "PHP";
foreach ($sentences as $index => $line) {
    if (strpos($line, $search) !== false) {
        echo "Sentence " . ($index+1) . " contains the word [$search]: " . $line . "\n";
    } else {
        echo "Sentence " . ($index+1) . " does NOT contain [$search]: " . $line . "\n";
    }
}
?>
OUTPUT: Q35: String Contains Another String
Sentence 1 does NOT contain [PHP]: The sky is blue
Sentence 2 contains the word [PHP]: PHP is a scripting language
Sentence 3 does NOT contain [PHP]: I love programming
Sentence 4 does NOT contain [PHP]: Array functions are useful
36. Create an array of fruits in PHP and display the third element.
<?php
echo "==============================\n";
echo " Q36: Fruits Array Demonstration\n";
echo "==============================\n\n";
// Step 1: Create an array of fruits
$fruits = array("Apple", "Banana", "Mango", "Orange", "Grapes", "Pineapple", "Papaya");
// Step 2: Display all fruits with indexes
echo "List of Fruits with Indexes:\n";
foreach($fruits as $index => $fruit) {
echo "Index $index => $fruit\n";
}
echo "\n";
$total = count($fruits);
echo "Total number of fruits in the array: $total\n\n";
echo "The third element in the array is: " . $fruits[2] . "\n\n";
// Step 5: Add a new fruit to the array
array_push($fruits, "Kiwi");
echo "After adding a new fruit (Kiwi), updated array is:\n";
foreach($fruits as $index => $fruit) {
    echo "Index $index => $fruit\n";
}
echo "\n";
$removeIndex = array_search("Banana", $fruits);
if ($removeIndex !== false) {
    unset($fruits[$removeIndex]);
}
echo "After removing 'Banana', updated array is:\n";
foreach($fruits as $index => $fruit) {
    echo "Index $index => $fruit\n";
}
echo "\n";
echo "First fruit in the array: " . reset($fruits) . "\n";
echo "Last fruit in the array: " . end($fruits) . "\n";
echo "\n=== End of Program ===\n";
?>
OUTPUT:  
==============================
 Q36: Fruits Array Demonstration
==============================
List of Fruits with Indexes:
Index 0 => Apple
Index 1 => Banana
Index 2 => Mango
Index 3 => Orange
Index 4 => Grapes
Index 5 => Pineapple
Index 6 => Papaya
Total number of fruits in the array: 7
The third element in the array is: Mango
After adding a new fruit (Kiwi), updated array is:
Index 0 => Apple
Index 1 => Banana
Index 2 => Mango
Index 3 => Orange
Index 4 => Grapes
Index 5 => Pineapple
Index 6 => Papaya
Index 7 => Kiwi
After removing 'Banana', updated array is:
Index 0 => Apple
Index 2 => Mango
Index 3 => Orange
Index 4 => Grapes
Index 5 => Pineapple
Index 6 => Papaya
Index 7 => Kiwi
First fruit in the array: Apple
Last fruit in the array: Kiwi

37. Explain Push and Pop in array functions.
<?php
// Q37 - Push and Pop Example in Arrays
echo "Q37: Push and Pop in Arrays\n\n";
// Step 1: Create a stack (array)
$stack = array("Red", "Green", "Blue");
// Step 2: Show original stack
echo "Original Stack:\n";
print_r($stack);
echo "\n";
// Step 3: Push new elements into stack
array_push($stack, "Yellow", "Purple");
echo "After Push (Yellow, Purple):\n";
print_r($stack);
echo "\n";
// Step 4: Pop element from stack
$popped = array_pop($stack);
echo "After Pop Operation:\n";
print_r($stack);
echo "Popped Element: " . $popped . "\n\n";
// Step 5: Push more elements
array_push($stack, "Black", "White");
echo "After another Push (Black, White):\n";
print_r($stack);
echo "\n";
// Step 6: Pop two elements
$firstPop = array_pop($stack);
$secondPop = array_pop($stack);
echo "After popping twice:\n";
print_r($stack);
echo "Popped Elements: $firstPop, $secondPop\n";
?>
OUTPUT:
Q37: Push and Pop in Arrays
Original Stack:
Array
(
    [0] => Red
    [1] => Green
    [2] => Blue
)
After Push (Yellow, Purple):
Array
(
    [0] => Red
    [1] => Green
    [2] => Blue
    [3] => Yellow
    [4] => Purple
)
After Pop Operation:
Array
(
    [0] => Red
    [1] => Green
    [2] => Blue
    [3] => Yellow
)
Popped Element: Purple
After another Push (Black, White):
Array
(
    [0] => Red
    [1] => Green
    [2] => Blue
    [3] => Yellow
    [4] => Black
    [5] => White
)
After popping twice:
Array
(
    [0] => Red
    [1] => Green
    [2] => Blue
    [3] => Yellow
)
Popped Elements: White, Black
38. Interpret the steps to iterate over a PHP array using a while loop with an example.
<?php
// Q38 - Iterating an array with while loop
echo "<h2>Q38: Iterating Array with While Loop</h2>";
// Define array
$numbers = array(10, 20, 30, 40, 50);
// Reset pointer to first element
reset($numbers);
// Loop until no more elements
while (($value = current($numbers)) !== false) {
    echo "Current Value: " . $value . "\n";
    next($numbers); // move pointer to next element
}
?>
OUTPUT: <h2>Q38: Iterating Array with While Loop</h2>Current Value: 10
Current Value: 20
Current Value: 30
Current Value: 40
Current Value: 50
39. A school wants to automate the calculation of student grades. Design a system that allows teachers to input student scores, calculates their grades, and generates a summary report. How would you utilize arrays and array functions to store and process the student data effectively?
<?php
function letter_grade(int|float $score): string {
    if ($score >= 90) return "A";
    if ($score >= 80) return "B";
    if ($score >= 70) return "C";
    if ($score >= 60) return "D";
    return "F";
}
$input = $_POST['raw'] ?? "Alice, 95\nBob, 82\nCharlie, 67\nDaisy, 74\nEvan, 58";
$students = [];
$errors = [];
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $lines = preg_split("/\r\n|\n|\r/", trim($input));
    foreach ($lines as $ln) {
        if (trim($ln) === '') continue;
        $parts = array_map('trim', explode(',', $ln));
        if (count($parts) !== 2 || $parts[0] === '' || !is_numeric($parts[1])) {
            $errors[] = "Invalid line: \"$ln\". Use format: Name,Score";
            continue;
        }
            $students[] = [
            'name'  => $parts[0],
            'score' => (float)$parts[1],
            'grade' => letter_grade((float)$parts[1])
        ];
    }
// Sort by score descending
         if ($students) {
        $scores = array_column($students, 'score');
        array_multisort($scores, SORT_DESC, $students);
    }
}
$total = array_reduce($students, fn($c, $s) => $c + $s['score'], 0);
$avg   = $students ? round($total / count($students), 2) : 0;
$max   = $students ? max(array_column($students, 'score')) : null;
$min   = $students ? min(array_column($students, 'score')) : null;
$dist  = ['A'=>0,'B'=>0,'C'=>0,'D'=>0,'F'=>0];
foreach ($students as $s) $dist[$s['grade']]++;
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q39 Student Grades System</title></head>
<body>
<h2>Student Grades System</h2>
<form method="post">
    <p>Enter students (one per line) as <b>Name,Score</b>:</p>
    <textarea name="raw" rows="8" cols="60"><?=htmlspecialchars($input)?></textarea><br><br>
    <button type="submit">Calculate Grades</button>
</form>
<?php if ($errors): ?>
    <h3>Input Errors</h3>
    <ul><?php foreach ($errors as $e) echo "<li>".htmlspecialchars($e)."</li>"; ?></ul>
<?php endif; ?>
<?php if ($students): ?>
    <h3>Per-Student Results</h3>
    <table border="1" cellpadding="6">
        <tr><th>#</th><th>Name</th><th>Score</th><th>Grade</th></tr>
        <?php foreach ($students as $i=>$s): ?>
            <tr>
                <td><?= $i+1 ?></td>
                <td><?= htmlspecialchars($s['name']) ?></td>
                <td><?= $s['score'] ?></td>
                <td><?= $s['grade'] ?></td>
            </tr>
        <?php endforeach; ?>
    </table>
   <h3>Summary</h3>
    <p><b>Total Students:</b> <?= count($students) ?></p>
    <p><b>Average:</b> <?= $avg ?></p>
    <p><b>Highest:</b> <?= $max ?></p>
    <p><b>Lowest:</b> <?= $min ?></p>
    <p><b>Grade Distribution:</b>
        A(<?=$dist['A']?>) B(<?=$dist['B']?>) C(<?=$dist['C']?>) D(<?=$dist['D']?>) F(<?=$dist['F']?>)
    </p>
<?php endif; ?>
</body>
</html>
OUTPUT:
Student Grades System
Enter students (one per line) as Name,Score:
Calculate Grades
Per-Student Results
#	Name	Score	Grade
1	Alice	95	A
2	Bob	82	B
3	Daisy	74	C
4	Charlie	67	D
5	Evan	58	F
Summary
Total Students: 5
Average: 75.2
Highest: 95
Lowest: 58
Grade Distribution: A(1) B(1) C(1) D(1) F(1)
40. Write a PHP script to remove all characters from a string except a-z A-Z 0-9 or " " using an array.
<?php
$input = $_POST['text'] ?? 'Hello@# 123 World!! $$ ^_^';
$clean = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $chars = preg_split('//u', $input, -1, PREG_SPLIT_NO_EMPTY); // array of characters
    $filtered = array_filter($chars, function($ch) {
        // Keep alphanumeric or space only
        return ctype_alnum($ch) || $ch === ' ';
    });
    $clean = implode('', $filtered);
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q40 Character Filter</title></head>
<body>
<h2>Q40: Keep only a–z A–Z 0–9 and spaces (Array-based)</h2>
<form method="post">
    <input type="text" name="text" size="60" value="<?=htmlspecialchars($input)?>">
    <button type="submit">Clean</button>
</form>
<?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?>
    <p><b>Original:</b> <?=htmlspecialchars($input)?></p>
    <p><b>Cleaned:</b> <?=htmlspecialchars($clean)?></p>
<?php endif; ?>
</body>
</html>
OUTPUT:
Q40: Keep only a–z A–Z 0–9 and spaces (Array-based)
Original: Hello@# 123 World!! $$ ^_^
Cleaned: Hello 123 World
41. How can you use regular expressions to extract all email addresses from a given string using an array in PHP?
<?php
$input = $_POST['text'] ?? 'Mail us at admin@example.com, info@test.org; cc: first.last@sub.domain.co.in';
$emails = [];
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $pattern = '/[A-Za-z0-9._%+\-]+@[A-Za-z0-9.\-]+\.[A-Za-z]{2,}/';
    preg_match_all($pattern, $input, $matches);
    $emails = $matches[0] ?? [];
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q41 Extract Emails</title></head>
<body>
<h2> Extract Emails Using Regular Expressions</h2>
<form method="post">
    <textarea name="text" rows="5" 
cols="70"><?= htmlspecialchars($input)?></textarea><br><br>
    <button type="submit">Extract</button>
</form>
<?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?>
    <h3>Found Emails (<?= count($emails) ?>)</h3>
    <?php if ($emails): ?>
        <ul><?php foreach ($emails as $e) echo "<li>".htmlspecialchars($e)."</li>";?></ul>
    <?php else: ?>
        <p>No valid emails found.</p>
    <?php endif; ?>
<?php endif; ?>
</body>
</html>
Output:   Input:
Text: Contact us at info@example.com or support@test.org for details.
Output:
Found Emails:
info@example.com
support@test.org
42. Write a PHP script to find the maximum and minimum marks from the following set of arrays
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
ANSWER:
<?php
$marks1 = [360,310,310,330,313,375,456,111,256];
$marks2 = [350,340,356,330,321];
$marks3 = [630,340,570,635,434,255,298];
$all = array_merge($marks1, $marks2, $marks3);
$maxVal = max($all);
$minVal = min($all);
$stats = [
    'marks1' => ['min'=>min($marks1),'max'=>max($marks1)],
    'marks2' => ['min'=>min($marks2),'max'=>max($marks2)],
    'marks3' => ['min'=>min($marks3),'max'=>max($marks3)],
];
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Max & Min Marks</title></head>
<body>
<h2> Maximum and Minimum Marks</h2>
<h3>Given Arrays</h3>
<pre><?php
print_r(['marks1'=>$marks1,'marks2'=>$marks2,'marks3'=>$marks3]);
?></pre>
<h3>Overall</h3>
<p><b>Maximum (overall):</b> <?= $maxVal ?></p>
<p><b>Minimum (overall):</b> <?= $minVal ?></p>
<h3>Per-Array Stats</h3>
<pre><?php print_r($stats); ?></pre>
</body>
</html>
OUTPUT:   Maximum Mark: 635
Minimum Mark: 111
43. Develop a regular expression pattern that validates a password based on the following criteria: at least 8 characters long, contains at least one uppercase letter, one lowercase letter, one digit, and one special character.
<?php
$password = $_POST['password'] ?? '';
$valid = null;
$errors = [];
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (strlen($password) < 8) $errors[] = "At least 8 characters."
 if (!preg_match('/[A-Z]/', $password)) $errors[] = "At least one uppercase letter.";
    if (!preg_match('/[a-z]/', $password)) $errors[] = "At least one lowercase letter.";
    if (!preg_match('/\d/', $password))   $errors[] = "At least one digit.";
    if (!preg_match('/[\W_]/', $password)) $errors[] = "At least one special character.";
    $valid = empty($errors);
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q43 Password Validator</title></head>
<body>
<h2>Password Validation (Regex)</h2>
<form method="post">
    <input type="text" name="password" size="40" placeholder="Enter password" value="<?=htmlspecialchars($password)?>">
    <button type="submit">Validate</button>
</form>
<?php if ($valid !== null): ?>
    <?php if ($valid): ?>
        <p style="color:green;"><b>Valid password </b></p>
    <?php else: ?>
        <p style="color:red;"><b>Invalid password </b></p>
        <ul><?php foreach ($errors as $e) echo "<li>".htmlspecialchars($e)."</li>"; ?></ul>
    <?php endif; ?>
    <p><b>Single Regex (reference):</b> <code>^(?=.[A-Z])(?=.[a-z])(?=.\d)(?=.[\W_]).{8,}$</code></p>
     <?php endif; ?>
</body>
</html>
OUTPUT:   Q43: Password Validation (Regex)
hello_0606M
Valid password ✅
Single Regex (reference): ^(?=.[A-Z])(?=.[a-z])(?=.\d)(?=.[\W_]).{8,}$
44. Develop a music playlist management system for a streaming service. The system should allow users tocreate, modify, and organize playlists. How would you use arrays and array functions to store and manipulate the song data and playlist information efficiently?
<?php
session_start();
if (!isset($_SESSION['playlist'])) {
    $_SESSION['playlist'] = []; // each song: ['title'=>..., 'artist'=>..., 'duration'=>seconds]
}
$playlist = &$_SESSION['playlist'];
function sanitize($s){ return trim($s); }
function add_song(&$pl, $title, $artist, $duration) {
    $pl[] = ['title'=>$title, 'artist'=>$artist, 'duration'=>(int)$duration];
}
function remove_song(&$pl, $idx) {
    if (isset($pl[$idx])) array_splice($pl, $idx, 1);
}
function move_song(&$pl, $idx, $dir) {
    $new = $idx + ($dir === 'up' ? -1 : 1);
    if ($idx>=0 && isset($pl[$idx]) && $new>=0 && isset($pl[$new])) {
        [$pl[$idx], $pl[$new]] = [$pl[$new], $pl[$idx]];
    }
}
function sort_by(&$pl, $key) {
    $col = array_column($pl, $key);
    array_multisort($col, SORT_ASC, $pl);
}
function total_duration($pl) {
    return array_reduce($pl, fn($c,$s)=>$c+$s['duration'], 0);
}
function fmt_time($sec) {
    $m = floor($sec/60); $s = $sec%60;
  return sprintf("%02d:%02d", $m, $s);
}
$action = $_POST['action'] ?? null;
if ($action === 'reset') {
    $playlist = [
        ['title'=>'Dreams','artist'=>'Fleetwood Mac','duration'=>257],
        ['title'=>'Levitating','artist'=>'Dua Lipa','duration'=>203],
        ['title'=>'Blinding Lights','artist'=>'The Weeknd','duration'=>200],
    ];
} elseif ($action === 'add') {
    $t = sanitize($_POST['title'] ?? '');
    $a = sanitize($_POST['artist'] ?? '');
    $d = (int)($_POST['duration'] ?? 0);
    if ($t && $a && $d>0) add_song($playlist, $t, $a, $d);
} elseif ($action === 'remove') {
    remove_song($playlist, (int)($_POST['index'] ?? -1));
} elseif ($action === 'move') {
    move_song($playlist, (int)($_POST['index'] ?? -1), $_POST['dir'] ?? 'up');
} elseif ($action === 'sort_title') {
    sort_by($playlist, 'title');
} elseif ($action === 'sort_artist') {
    sort_by($playlist, 'artist');
} elseif ($action === 'shuffle') {
    shuffle($playlist);
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q44 Playlist Manager</title></head>
<body>
<h2> Music Playlist Management (Session + Arrays)</h2>
<form method="post" style="margin-bottom:12px;">
<button name="action" value="reset">Create Sample Playlist</button>
    <button name="action" value="sort_title">Sort by Title</button>
    <button name="action" value="sort_artist">Sort by Artist</button>
    <button name="action" value="shuffle">Shuffle</button>
</form>
<form method="post">
    <input type="hidden" name="action" value="add">
    Title: <input name="title" required>
    Artist: <input name="artist" required>
    Duration (sec): <input name="duration" type="number" min="1" required>
    <button type="submit">Add Song</button>
</form>
<?php if ($playlist): ?>
    <h3>Current Playlist</h3>
    <table border="1" cellpadding="6">
        <tr><th>#</th><th>Title</th><th>Artist</th><th>Duration</th><th>Actions</th></tr>
        <?php foreach ($playlist as $i=>$song): ?>
            <tr>
                <td><?= $i ?></td>
                <td><?= htmlspecialchars($song['title']) ?></td>
                <td><?= htmlspecialchars($song['artist']) ?></td>
                <td><?= fmt_time($song['duration']) ?></td>
                <td>
                    <form method="post" style="display:inline;">
                        <input type="hidden" name="index" value="<?=$i?>">
                        <button name="action" value="move">Move</button>
                        <input type="hidden" name="dir" value="up">
                    </form>
                    <form method="post" style="display:inline;">
                        <input type="hidden" name="index" value="<?=$i?>">
                        <input type="hidden" name="dir" value="down">
                        <button name="action" value="move"></button>
                    </form>
                    <form method="pos t" style="display:inline;">
                        <input type="hidden" name="index" value="<?=$i?>">
                        <button name="action" value="remove">Remove</button>
                    </form>
                </td>
            </tr>
        <?php endforeach; ?>
        <tr>
            <td colspan="3" align="right"><b>Total Duration</b></td>
            <td colspan="2"><b><?= fmt_time(total_duration($playlist)) ?></b></td>
        </tr>
    </table>
<?php else: ?>
    <p>No songs yet. Click “Create Sample Playlist” or add your own.</p>
<?php endif; ?>
</body>
</html>
OUTPUT:
Music Playlist Management (Session + Arrays)
Create Sample Playlist Sort by Title Sort by Artist Shuffle
Title:  Artist:  Duration (sec):  Add Song
Current Playlist
#	Title	Artist	Duration	Actions
0	Dreams	Fleetwood Mac	04:17	Move 
 
Remove


1	Levitating	Dua Lipa	03:23	Move 
 


2	Blinding Lights	The Weeknd	03:20	Move 
 
Remove


Total Duration	11:00

45. Write a PHP function to compare two multidimensional arrays and return the difference.
<?php
function array_diff_assoc_recursive($a1, $a2) {
    $diff = [];
    foreach ($a1 as $k => $v) {
        if (array_key_exists($k, $a2)) {
            if (is_array($v) && is_array($a2[$k])) {
                $sub = array_diff_assoc_recursive($v, $a2[$k]);
                if (!empty($sub)) $diff[$k] = $sub;
            } elseif ($a2[$k] !== $v) {
                $diff[$k] = $v;
            }
        } else {
            $diff[$k] = $v; // key missing in a2
        }
    }
    return $diff;
}
$defaultA = [
    "user" => ["id"=>1,"name"=>"Alice","roles"=>["admin","editor"]],
    "active" => true,
    "meta" => ["lang"=>"en","tz"=>"IST"]
];
$defaultB = [
    "user" => ["id"=>1,"name"=>"Alice","roles"=>["admin","viewer"]],
    "active" => false,
    "meta" => ["lang"=>"en","tz"=>"UTC"]
];

$rawA = $_POST['a'] ?? json_encode($defaultA, JSON_PRETTY_PRINT);
$rawB = $_POST['b'] ?? json_encode($defaultB, JSON_PRETTY_PRINT);
$out = null; $err = null;

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $a = json_decode($rawA, true);
    $b = json_decode($rawB, true);
    if (!is_array($a) || !is_array($b)) {
        $err = "Both inputs must be valid JSON objects/arrays.";
    } else {
        $out = array_diff_assoc_recursive($a, $b);
    }
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q45 Compare Multidimensional Arrays</title></head>
<body>
<h2>Recursive Difference of Two Multidimensional Arrays</h2>
<form method="post">
    <table>
        <tr>
            <td>
            <p><b>Array A (JSON)</b></p>
                <textarea name="a" rows="12" cols="50"><?=htmlspecialchars($rawA)?></textarea>
            </td>
            <td>
                <p><b>Array B (JSON)</b></p>
                <textarea name="b" rows="12" cols="50"><?=htmlspecialchars($rawB)?></textarea>
            </td>
        </tr>
    </table>
    <br><button type="submit">Compare</button>
</form>

<?php if ($err): ?>
    <p style="color:red;"><?=htmlspecialchars($err)?></p>
<?php elseif ($out !== null): ?>
    <h3>Differences (A − B)</h3>
    <pre><?php print_r($out); ?></pre>
<?php endif; ?>
</body>
</html>
OUTPUT:
 
46. Write a PHP program to find the index of a specific value in an array.
<?php
$raw = $_POST['arr'] ?? '10, 20, 30, 20, 50';
$target = $_POST['target'] ?? '20';
$arr = array_values(array_filter(array_map('trim', explode(',', $raw)), fn($x)=>$x!==''));
$firstIndex = null;
$allIndices = [];
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // treat as strings for generality; change to numeric with array_map('intval', $arr) if needed
    $firstIndex = array_search($target, $arr, true);
    foreach ($arr as $idx => $val) {
        if ($val === $target) $allIndices[] = $idx;
    }
}
?>
<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Q46 Find Index in Array</title></head>
<body>
<h2>Q46: Find Index of a Specific Value</h2>
<form method="post">
    Array (comma-separated): <input type="text" name="arr" size="50" value="<?=htmlspecialchars($raw)?>"><br><br>
    Target value: <input type="text" name="target" value="<?=htmlspecialchars($target)?>">
    <button type="submit">Find</button>
</form>
<?php if ($_SERVER['REQUEST_METHOD'] === 'POST'): ?>
    <h3>Result</h3>
    <p><b>Array:</b> [<?=htmlspecialchars(implode(', ', $arr))?>]</p>
    <?php if ($firstIndex !== false): ?>
        <p><b>First index of "<?=htmlspecialchars($target)?>":</b> <?= $firstIndex ?></p>
        <p><b>All indices:</b> <?= $allIndices ? implode(', ', $allIndices) : '—' ?></p>
    <?php else: ?>
        <p>Value not found.</p>
    <?php endif; ?>
<?php endif; ?>
</body>
</html>
OUTPUT:
Array (comma-separated): 10,20,30,20,50
Target value: 20
Result
Array: [10, 20, 30, 20, 50]
First index of "20": 1
All indices: 1, 3
47. Delete an element from the below array. And print the array elements in PHP. $x = array (1, 2, 3, 4, 5);
<?php
// Step 1: Create an array
$numbers = array(10, 20, 30, 40, 50);
echo "Original Array: \n";
print_r($numbers);
// Step 2: Element to delete
$elementToDelete = 30; // We want to delete value 30
echo "\nAttempting to delete element: $elementToDelete\n";
// Step 3: Search for the element in the array
$key = array_search($elementToDelete, $numbers);
if ($key !== false) {
    // Step 4: Remove the element
    unset($numbers[$key]);
    echo "Element $elementToDelete deleted successfully.\n";
} else {
echo "Element $elementToDelete not found in array.\n";
}
// Step 5: Re-index the array
$numbers = array_values($numbers);
// Step 6: Display updated array
echo "\nUpdated Array after Deletion:\n";
foreach ($numbers as $index => $value) {
    echo "Index $index => $value\n";
}
?>
Output:
Original Array: Array ( [0] => 10 [1] => 20 [2] => 30 [3] => 40 [4] => 50 ) Attempting to delete element: 30 Element 30 deleted successfully. Updated Array after Deletion: Index 0 => 10 Index 1 => 20 Index 2 => 40 Index 3 => 50
48. Record number handling in PHP with suitable examples.
<?php
// Step 1: Store records in an associative array
$students = array(
    101 => "Alice",
    102 => "Bob",
    103 => "Charlie",
    104 => "David",
    105 => "Emma"
);
// Step 2: Display all records
echo "----- Student Records -----\n";
foreach ($students as $roll => $name) {
    echo "Roll No: $roll | Name: $name\n";
}
// Step 3: Search for a record
$rollToFind = 103; // we want to search for Roll No 103
echo "\nSearching for Roll No: $rollToFind...\n";
if (array_key_exists($rollToFind, $students)) {
    echo "Record Found: Roll No: $rollToFind | Name: " . $students[$rollToFind] . "\n";
} else {
   echo "No record found for Roll No: $rollToFind\n";
}
// Step 4: Count total records
$totalRecords = count($students);
echo "\nTotal Student Records: $totalRecords\n";
// Step 5: Adding a new record
$newRoll = 106;
$newName = "Frank";
$students[$newRoll] = $newName;
echo "\nNew record added successfully.\n";
// Step 6: Display updated records
echo "\n----- Updated Student Records -----\n";
foreach ($students as $roll => $name) {
    echo "Roll No: $roll | Name: $name\n";
}
?>
Output:
----- Student Records ----- Roll No: 101 | Name: Alice Roll No: 102 | Name: Bob Roll No: 103 | Name: Charlie Roll No: 104 | Name: David Roll No: 105 | Name: Emma Searching for Roll No: 103... Record Found: Roll No: 103 | Name: Charlie Total Student Records: 5 New record added successfully. ----- Updated Student Records ----- Roll No: 101 | Name: Alice Roll No: 102 | Name: Bob Roll No: 103 | Name: Charlie Roll No: 104 | Name: David Roll No: 105 | Name: Emma Roll No: 106 | Name: Frank
49. A sports team wants to evaluate player performance based on various statistical metrics. Design a system that utilizes numerical types and mathematical operators to calculate performance indices, averages, and rankings. How would you handle large datasets and perform complex calculations efficiently?
<?php
$players = array(
    "Rohit"   => array("matches" => 10, "runs" => 400, "wickets" => 5),
    "Virat"   => array("matches" => 12, "runs" => 520, "wickets" => 2),
    "Hardik"  => array("matches" => 8,  "runs" => 300, "wickets" => 10),
);
echo "<pre>"; // preserves newlines and spaces
echo "----- Player Performance Report -----\n";
echo "Name    Matches Runs Wickets Bat.Avg Bowl.Impact PerformanceIndex\n";
foreach ($players as $name => $stats) {
    $battingAvg = $stats["matches"] > 0 ? $stats["runs"] / $stats["matches"] : 0;
    $bowlingImpact = $stats["wickets"] * 10;
    $performanceIndex = ($battingAvg + $bowlingImpact) / 2;
    printf("%-7s %-7d %-4d %-7d %-7.2f %-11d %-10.2f\n",
        $name,
        $stats["matches"],
        $stats["runs"],
        $stats["wickets"],
        $battingAvg,
        $bowlingImpact,
        $performanceIndex
    );
}
echo "</pre>";
?>
OUTPUT:

 
50. Construct a PHP script to lower-case and upper-case, all elements in an array.
<?php
// Step 1: Create array
$fruits = array("Apple", "Banana", "Cherry", "Mango", "Orange");
// Step 2: Display original array
echo "Original Array:<br>";
print_r($fruits);
// Step 3: Convert to lowercase
$lowercaseFruits = array_map('strtolower', $fruits);
// Step 4: Convert to uppercase
$uppercaseFruits = array_map('strtoupper', $fruits);
// Step 5: Display converted arrays
echo "\nLowercase Array:\n";
foreach ($lowercaseFruits as $fruit) {
    echo $fruit . "<\br>";
}
echo "\nUppercase Array:<br>";
foreach ($uppercaseFruits as $fruit) {
    echo $fruit . "<br>";
}
?>
OUTPUT:
Original Array:
Array
(
    [0] => Apple
    [1] => Banana
    [2] => Cherry
    [3] => Mango
    [4] => Orange
)
Lowercase Array:
Apple
banana
cherry
mango
orange
Uppercase Array:
APPLE
BANANA
CHERRY
MANGO
ORANGE
51. Differentiate between array_shift() and array_unshift() in PHP.	
<?php
// Demonstrating array_shift() and array_unshift()
$fruits = ["Apple", "Banana", "Cherry"];
// array_shift(): Removes the first element
$removed = array_shift($fruits);
echo "Removed element using array_shift(): $removed\n";
print_r($fruits);
// array_unshift(): Adds elements to the beginning
array_unshift($fruits, "Mango", "Orange");
echo "After adding elements using array_unshift():\n";
print_r($fruits);
?>
OUTPUT:
Removed element using array_shift(): Apple
Array
(
    [0] => Banana
    [1] => Cherry
)
After adding elements using array_unshift():
Array
(
    [0] => Mango
    [1] => Orange
    [2] => Banana
    [3] => Cherry
)
52. Compare stack and queue operations using PHP with appropriate examples.
<?php
// Stack (LIFO - Last In First Out)
$stack = [];
array_push($stack, "A");
array_push($stack, "B");
array_push($stack, "C");
echo "Stack after pushes:\n";
print_r($stack);
// Pop from stack
$last = array_pop($stack);
echo "Popped from stack: $last\n";
print_r($stack);
// Queue (FIFO - First In First Out)
$queue = [];
array_push($queue, "A");
array_push($queue, "B");
array_push($queue, "C");
echo "Queue after pushes:\n";
print_r($queue);
$first = array_shift($queue);
echo "Removed from queue: $first\n";
print_r($queue);
>
53. Demonstrate the difference in behaviour of array_pop() and array_shift() using a numeric array.
<?php
$numbers = [1, 2, 3, 4, 5];
// array_pop(): removes last element
$last = array_pop($numbers);
echo "array_pop() removed: $last\n";
print_r($numbers);
// array_shift(): removes first element
$first = array_shift($numbers);
echo "array_shift() removed: $first\n";
print_r($numbers);
?>
OUTPUT:
array_pop() removed: 5 Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 ) 
array_shift() removed: 1 Array ( [0] => 2 [1] => 3 [2] => 4 )
54. Design a PHP program that simulates a ticket booking queue using built-in array functions.
<?php
$ticketQueue = ["John", "Emma", "Alex"];
// New customers join queue
array_push($ticketQueue, "Sophia", "Michael");
// Serve customers (FIFO)
while (!empty($ticketQueue)) {
    $customer = array_shift($ticketQueue);
    echo "Booking ticket for: $customer\n";
}
?>
OUTPUT:
Booking ticket for: John
 Booking ticket for: Emma 
Booking ticket for: Alex Booking ticket for: Sophia 
Booking ticket for: Michael
55. Develop a PHP script that uses stack functions to reverse a string.
<?php
function reverseStringUsingStack($str) {
    $stack = str_split($str); // Push all chars
    $reversed = "";
    while (!empty($stack)) {
        $reversed .= array_pop($stack); // Pop chars
    }
    return $reversed;
}
echo reverseStringUsingStack("Hello World");
?>
OUTPUT:
dlroW olleH
56. What are all the Functions available to sort a PHP array?
Functions to Sort a PHP Array
•	sort() – Sort ascending, reindex
•	rsort() – Sort descending, reindex
•	asort() – Sort ascending, maintain keys
•	arsort() – Sort descending, maintain keys
•	ksort() – Sort by keys ascending
•	krsort() – Sort by keys descending
•	natsort() – Natural order sorting
57. Outline the Regular Expression with appropriate examples.
<?php
echo "Q57: Regular Expression Examples in PHP\n\n";

// ----------------------------
// Example 1: Validate an Email Address
// ----------------------------
$email = "example@test.com";

if (preg_match("/^[\w\.-]+@[\w\.-]+\.\w+$/", $email)) {
    echo "Email '$email' is valid.\n";
} else {
    echo "Email '$email' is invalid.\n";
}

// ----------------------------
// Example 2: Extract numbers from a string
// ----------------------------
$stringWithNumbers = "Order ID: 12345, Amount: 567.89";
preg_match_all("/\d+(\.\d+)?/", $stringWithNumbers, $matches);

echo "Numbers found in string: " . implode(", ", $matches[0]) . "\n";

// ----------------------------
// Example 3: Check if a word exists in a sentence (case-insensitive)
// ----------------------------
$sentence = "The quick brown fox jumps over the lazy dog";

if (preg_match("/fox/i", $sentence)) {
    echo "The word 'fox' was found in the sentence.\n";
} else {
    echo "The word 'fox' was not found in the sentence.\n";
}
?>
OUTPUT:
Q57: Regular Expression Examples in PHP

Email 'example@test.com' is valid.
Numbers found in string: 12345, 567.89
The word 'fox' was found in the sentence.
58. Construct a PHP program to extract the mail addresses in the given string using regular expression.
<?php
// Q58: Validate Username using Regular Expression
// Rules: 
// - Only letters, numbers, and underscores allowed
// - Length between 5 and 15 characters

echo "<h2>Q58: Username Validation</h2>";

function validateUsername($username) {
    // Regular expression for username validation
    $pattern = "/^[A-Za-z0-9_]{5,15}$/";
    if (preg_match($pattern, $username)) {
        echo "Username '$username' is VALID.<br>";
    } else {
        echo "Username '$username' is INVALID.<br>";
    }
}

// Test usernames
validateUsername("User_123");
validateUsername("ab");
validateUsername("Valid_User01");
validateUsername("Invalid User!");
?>
OUTPUT:
Q58: Username Validation
Username 'User_123' is VALID.
Username 'ab' is INVALID.
Username 'Valid_User01' is VALID.
Username 'Invalid User!' is INVALID.
59. Create a function that takes an array of numbers as input and returns the average value.
<?php
echo "<h2>Q59: String Analysis</h2>";
$text = "PHP is fun.
It is powerful for web development.
Learning PHP improves coding skills.";
$wordCount = str_word_count($text);
// Count characters
$charCount = strlen($text);
// Count lines
$lineCount = substr_count($text, "\n") + 1;
echo "<b>Text:</b> <pre>$text</pre>";
echo "Total Words: $wordCount<br>";
echo "Total Characters: $charCount<br>";
echo "Total Lines: $lineCount<br>";
?>
OUTPUT:
Q59: String Analysis
Total Words: 13
Total Characters: 97
Total Lines: 3
60. Write a PHP function to search a specified value within the values of an associative array.
<?php
// Q60: Check if string starts with a specific word

echo "<h2>Q60: Check String Start</h2>";

function startsWith($string, $startWord) {
    return substr($string, 0, strlen($startWord)) === $startWord;
}

$text = "Hello world, PHP is amazing!";
$word = "Hello";

if (startsWith($text, $word)) {
    echo "The string starts with '$word'.<br>";
} else {
    echo "The string does not start with '$word'.<br>";
}
?>
OUTPUT:
Q60: Check String Start
The string starts with 'Hello'.
61. Recall the steps to delete an element from an array?
<?php
echo "===== Q61: Delete an element from an array =====\n";
// Example 1: Numeric array
$nums = [10, 20, 30, 40, 50];
$toDelete = 30;
echo "Original numeric array: "; print_r($nums);
// 1) Find index
$idx = array_search($toDelete, $nums, true);
// 2) Delete if found
if ($idx !== false) 
   unset($nums[$idx]);
    echo "Deleted value $toDelete at index $idx.\n";
} else {
    echo "Value $toDelete not found.\n";
}
// 3) Reindex for clean indices
$nums = array_values($nums);
echo "After deletion + reindex: "; print_r($nums);
// Example 2: Associative array (no reindexing needed unless you want)
$student = ['id'=>101, 'name'=>'Asha', 'dept'=>'CSE', 'year'=>3];
echo "\nOriginal associative array: "; print_r($student);
// delete a key directly when you know it
unset($student['dept']);
echo "After deleting key 'dept': "; print_r($student);
?>
OUTPUT:
===== Q61: Delete an element from an array =====
Original numeric array: Array ( [0] => 10 [1] => 20 [2] => 30 [3] => 40 [4] => 50 )
Deleted value 30 at index 2.
After deletion + reindex: Array ( [0] => 10 [1] => 20 [2] => 40 [3] => 50 )
Original associative array: Array ( [id] => 101 [name] => Asha [dept] => CSE [year] => 3 )
After deleting key 'dept': Array ( [id] => 101 [name] => Asha [year] => 3 )
62. Demonstrate a PHP script which rounds the following values with 1 decimal digit precision. Samplevalues : 1.65 1.65 -1.54
<?php
echo "===== Q62: Rounding with modes =====\n";
$values = [1.65, 1.65, -1.54]; // as per sample
$modes = [
    'HALF_UP'   => PHP_ROUND_HALF_UP,
    'HALF_DOWN' => PHP_ROUND_HALF_DOWN,
    'HALF_EVEN' => PHP_ROUND_HALF_EVEN,
'HALF_ODD'  => PHP_ROUND_HALF_ODD,
];
foreach ($values as $v) {
    echo "Value: $v\n";
    foreach ($modes as $name => $mode) {
        $r = round($v, 1, $mode);
        echo "  $name => $r\n";
    }
}
?>
Output:
===== Q62: Rounding with modes =====
Value: 1.65
  HALF_UP => 1.7
  HALF_DOWN => 1.6
  HALF_EVEN => 1.6
  HALF_ODD => 1.7
Value: 1.65
  HALF_UP => 1.7
  HALF_DOWN => 1.6
  HALF_EVEN => 1.6
  HALF_ODD => 1.7
Value: -1.54
  HALF_UP => -1.5
  HALF_DOWN => -1.5
  HALF_EVEN => -1.5
  HALF_ODD => -1.5
 63. Discover a function that takes an array of numbers as input and returns the sum of all the even numbers in the array.
<?php
echo "===== Q63: Sum of even numbers =====\n";
function sum_of_evens(array $arr): int {
    $sum = 0;
    foreach ($arr as $v) {
        // consider only integer-like numerics
        if (is_numeric($v) && (int)$v == $v && ((int)$v) % 2 === 0) {
            $sum += (int)$v;
        }
    }
    return $sum;
}
$input = [1, 2, 3, 4, 5, 6, '8', 'x', 10.0, 11.2];
echo "Input: "; print_r($input);
echo "Sum of evens: " . sum_of_evens($input) . "\n";
?>
OUTPUT:
===== Q63: Sum of even numbers =====
Input: Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 [5] => 6 [6] => 8 [7] => x [8] => 10 [9] => 11.2 )
Sum of evens: 30
64. A retail company wants to forecast future sales based on historical data. Develop a system that utilizes numerical types, mathematical operators to analyze sales trends, calculate growth rates, and generate sales forecasts using arrays in php.
<?php
echo "===== Q64: Sales trend & forecast =====\n";
$sales = [1200, 1350, 1500, 1600, 1800, 2100, 1900, 2000, 2300, 2500, 2400, 2600]; // 12 months
// 1) MoM growth rates (as fractions)
$growth = [];
for ($i = 1; $i < count($sales); $i++) {
    $prev = $sales[$i-1];
    $cur  = $sales[$i];
    $growth[] = ($cur - $prev) / $prev;
}
// 2) 3-month moving average
$ma3 = [];
for ($i = 0; $i < count($sales); $i++) {
    if ($i >= 2) {
        $ma3[$i] = ($sales[$i] + $sales[$i-1] + $sales[$i-2]) / 3.0;
    }
}
// 3) Simple projection using average growth
$avg_growth = count($growth) ? array_sum($growth) / count($growth) : 0.0;
$projected_next = (int) round(end($sales) * (1 + $avg_growth));
// Print report
echo "Sales (months 1..12): "; print_r($sales);
echo "MoM growth (fraction): "; print_r(array_map(fn($g)=>round($g,3), $growth));
echo "3-month moving average (from month 3): "; print_r($ma3);
echo "Average MoM growth: " . round($avg_growth * 100, 2) . "%\n";
echo "Projected next month: $projected_next\n";
?>
OUTPUT:
===== Q64: Sales trend & forecast =====
Sales (months 1..12): Array ( [0] => 1200 [1] => 1350 [2] => 1500 [3] => 1600 [4] => 1800 [5] => 2100 [6] => 1900 [7] => 2000 [8] => 2300 [9] => 2500 [10] => 2400 [11] => 2600 )
MoM growth (fraction): Array ( [0] => 0.125 [1] => 0.111 [2] => 0.067 [3] => 0.125 [4] => 0.167 [5] => -0.095 [6] => 0.053 [7] => 0.15 [8] => 0.087 [9] => -0.04 [10] => 0.083 )
3-month moving average (from month 3): Array ( [2] => 1350 [3] => 1483.3333333333 [4] => 1633.3333333333 [5] => 1833.3333333333 [6] => 1966.6666666667 [7] => 2000 [8] => 2066.6666666667 [9] => 2266.6666666667 [10] => 2400 [11] => 2500 )
Average MoM growth: 8.52%
Projected next month: 2732
65. Demonstrate PHP script that checks if a string contains another string and displays the result.
<?php
echo "===== Q65: String contains another string =====\n";
$haystack = "Learning PHP arrays is fun.";
$needle1 = "PHP";
$needle2 = "python";
// Case-sensitive
echo "Case-sensitive check for '$needle1': ";
echo (strpos($haystack, $needle1) !== false) ? "FOUND\n" : "NOT FOUND\n";
// Case-insensitive
echo "Case-insensitive check for '$needle2': ";
echo (stripos($haystack, $needle2) !== false) ? "FOUND\n" : "NOT FOUND\n";
?>
OUTPUT:
===== Q65: String contains another string =====
Case-sensitive check for 'PHP': FOUND
Case-insensitive check for 'python': NOT FOUND
66. Difference between count() and sizeof() function in PHP.
<?php
echo "===== Q66: count() vs sizeof() =====\n";
$arr = [1, 2, [3, 4], ['a'=>5, 'b'=>[6,7]]];
echo "count (top-level): " . count($arr) . "\n";
echo "sizeof (top-level): " . sizeof($arr) . "\n"; // identical
echo "count recursive: " . count($arr, COUNT_RECURSIVE) . "\n";
?>
OUTPUT:
===== Q66: count() vs sizeof() =====
count (top-level): 4
sizeof (top-level): 4
count recursive: 9
67. Construct a program that tokenizes a sentence into words using regular expressions. Then, count the number of occurrences of each word and display the results.
<?php
echo "===== Q67: Tokenize & count =====\n";
$text = "Hello, hello! This is a test. This test counts words; words count.";
$tokens = preg_split('/[^A-Za-z]+/', strtolower($text), -1, PREG_SPLIT_NO_EMPTY);
$freq = [];
foreach ($tokens as $w) {
    $freq[$w] = ($freq[$w] ?? 0) + 1;
}
echo "Text: $text\n";
echo "Tokens: "; print_r($tokens);
echo "Frequencies:\n"; print_r($freq);
?>
Output:
===== Q67: Tokenize & count =====
Text: Hello, hello! This is a test. This test counts words; words count.
Tokens: Array ( [0] => hello [1] => hello [2] => this [3] => is [4] => a [5] => test [6] => this [7] => test [8] => counts [9] => words [10] => words [11] => count )
Frequencies:
Array ( [hello] => 2 [this] => 2 [is] => 1 [a] => 1 [test] => 2 [counts] => 1 [words] => 2 [count] => 1 )
68. Construct a PHP script that catches a division by zero error using try-catch.
<?php
echo "===== Q68: Try–catch division by zero =====\n";
function safe_divide($a, $b) {
    try {
        if ($b == 0) {
            throw new DivisionByZeroError("Cannot divide by zero");
        }
        return $a / $b;
    } catch (Throwable $e) {
        echo "Error: " . $e->getMessage() . "\n";
        return null;
    }
}
echo "10 / 2 = " . safe_divide(10, 2) . "\n";
echo "10 / 0 = " . var_export(safe_divide(10, 0), true) . "\n";
?>
OUTPUT:
===== Q68: Try–catch division by zero =====
10 / 2 = 5
Error: Cannot divide by zero
10 / 0 = NULL
69. Build a PHP function to change the following array's all values to upper or lower case.
Sample arrays :
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
Expected Output :
Values are in lower case.
Array ( [A] => blue [B] => green [c] => red )
Values are in upper case.
Array ( [A] => BLUE [B] => GREEN [c] => RED )
ANSWER:
<?php
echo "===== Q69: Change values to lower/upper =====\n";
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
// Lower values
$lower = array_map('strtolower', $Color);
echo "Values are in lower case.\n";
print_r($lower);
$upper = array_map('strtoupper', $Color);
echo "Values are in upper case.\n";
print_r($upper);
?>
OUTPUT:
===== Q69: Change values to lower/upper ===== 
Values are in lower case. Array ( [A] => blue [B] => green [c] => red ) 
Values are in upper case. Array ( [A] => BLUE [B] => GREEN [c] => RED )
70. Create a PHP program to take input, a sequence of numbers from the user and store it in a list or array.
<?php
echo "===== Q70: Read numbers into an array =====\n";
// --- A) Web-style (simulate a form input like "10, 20, 30, 40") ---
$input = "10, 20, 30, 40, 50, xyz"; // simulate input string
$parts = preg_split('/\\s*,\\s*/', trim($input));
$nums = [];
foreach ($parts as $p) {
    if ($p === '') continue;
    if (!is_numeric($p)) {
        echo "Skipping invalid token: $p\n";
        continue;
    }
    $nums[] = $p + 0; // cast to int/float
}
echo "From web-style input \"$input\": "; print_r($nums);
OUTPUT:
===== Q70: Read numbers into an array =====
Skipping invalid token: xyz
From web-style input "10, 20, 30, 40, 50, xyz": Array ( [0] => 10 [1] => 20 [2] => 30 [3] => 40 [4] => 50 )

